<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.fabricexplorer.mapper.TransactionMapper" >
    <select id="getTxCountByBlockNum" resultType="Integer">
        select
            blocknum,txcount
        from
            blocks
        where
            channel_genesis_hash = #{channel_genesis_hash} and
            blocknum = #{blockNum}
    </select>
    <select id="getTransactionByID" resultType="com.example.fabricexplorer.entity.Transaction" parameterType="java.util.Map">
        select
            t.txhash,t.validation_code,t.payload_proposal_hash,t.creator_msp_id,t.endorser_msp_id,t.chaincodename,t.type,t.createdt,t.read_set,
            t.write_set,channel.name as channelName
        from
            TRANSACTIONS as t
        inner join
            channel
        on
            t.channel_genesis_hash=channel.channel_genesis_hash
        where
            t.txhash = #{txHash};
    </select>

    <select id="existTransaction" parameterType="com.example.fabricexplorer.entity.Transaction" resultType="Integer">
        select count(1) as c from transactions where block_id = #{blockId}
        and txhash = #{txHash} and channel_genesis_hash = #{channelGenesisHash}
    </select>

    <insert id="saveTransaction" parameterType="com.example.fabricexplorer.entity.Transaction">
        insert into
            transactions(id, block_id, txhash,
            createdt, chaincodename, status,
            creator_msp_id, endorser_msp_id, chaincode_id,
            type, read_set, write_set,
            channel_genesis_hash, validation_code, envelope_signature,
            payload_extension, creator_id_bytes, creator_nonce,
            chaincode_proposal_input, tx_response, payload_proposal_hash,
            endorser_id_bytes, endorser_signature) VALUE
        (#{id},#{blockId},#{txHash},
        #{createDt},#{chainCode},#{status},
        #{creatorMspId},#{endorserMspId},#{chaincodeId},
        #{type},#{readSet},#{writeSet},
        #{channelGenesisHash},#{validationCode},#{envelopeSignature},
        #{payloadExtension},#{creatorIdBytes},#{creatorNonce},
        #{chaincodeProposalInput},#{txResponse},#{payloadProposalHash},
        #{endorserIdBytes},#{endorserSignature}
        )
    </insert>

    <update id="updateChainCodeAfterSaveTransaction" parameterType="com.example.fabricexplorer.entity.Transaction">
        update chaincodes set txcount =txcount+1 where channel_genesis_hash=#{channelGenesisHash}
    </update>
    <update id="updateChannelAfterSaveTransaction" parameterType="com.example.fabricexplorer.entity.Transaction">
        update channel set trans =trans+1 where channel_genesis_hash=#{channelGenesisHash}
    </update>

    <select id="getTxCount" resultType="integer">
        select count(1) from transactions
    </select>

    <select id="getTxCountList" resultType="java.util.Map" parameterType="string">
        select t.creator_msp_id as name,count(1) as value from transactions as t  where channel_genesis_hash = #{channelGenesisHash} group by creator_msp_id
    </select>

    <select id="getTxList" parameterType="java.util.Map" resultType="java.util.Map">
        SELECT
            t.creator_msp_id,
            t.txhash,
            t.type,
            t.chaincodename,
            t.createdt,
            t.chaincode_id,
            channel.NAME AS channelName
        FROM
            transactions AS t
            INNER JOIN channel ON t.channel_genesis_hash = channel.channel_genesis_hash
        WHERE
            t.block_id >= #{ blockNum }
            AND t.id >= #{ txid }
            <if test="orgs!=null">
                and creator_msp_id in
                <foreach collection="orgs" item="org" index="index" open="(" close=")" separator=",">
                    #{org}
                </foreach>
            </if>
            AND t.channel_genesis_hash = #{channelGenesisHash}
            AND t.createdt BETWEEN #{from}
            AND #{to}
        ORDER BY
	        t.id DESC
    </select>
</mapper>